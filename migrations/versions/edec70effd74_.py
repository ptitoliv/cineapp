"""empty message

Revision ID: edec70effd74
Revises: b037baf33cfa
Create Date: 2021-06-13 19:03:10.107347

"""

# revision identifiers, used by Alembic.
revision = 'edec70effd74'
down_revision = 'b037baf33cfa'

from alembic import op
import sqlalchemy as sa
import cineapp.migration_types
import json

from sqlalchemy.dialects import mysql

def upgrade():
   ### commands auto generated by Alembic - please adjust! ###

    # Create new show table
    op.create_table('shows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('original_name', sa.String(length=100), nullable=True),
    sa.Column('release_date', sa.Date(), nullable=True),
    sa.Column('type', sa.String(length=5), nullable=True),
    sa.Column('url', sa.String(length=100), nullable=True),
    sa.Column('origin', sa.String(length=5), nullable=True),
    sa.Column('director', sa.String(length=500), nullable=True),
    sa.Column('overview', sa.String(length=2000), nullable=True),
    sa.Column('poster_path', sa.String(length=255), nullable=True),
    sa.Column('added_when', sa.DateTime(), nullable=True),
    sa.Column('added_by_user', sa.Integer(), nullable=True),
    sa.Column('show_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['added_by_user'], ['users.id'], ),
    sa.ForeignKeyConstraint(['origin'], ['origins.id'], ),
    sa.ForeignKeyConstraint(['type'], ['types.id'], ),
    sa.PrimaryKeyConstraint('id'),
    mysql_charset='utf8',
    mysql_collate='utf8_general_ci'
    )

    op.create_index(op.f('ix_shows_director'), 'shows', ['director'], unique=False)
    op.create_index(op.f('ix_shows_name'), 'shows', ['name'], unique=False)
    op.create_index(op.f('ix_shows_origin'), 'shows', ['origin'], unique=False)
    op.create_index(op.f('ix_shows_original_name'), 'shows', ['original_name'], unique=False)
    op.create_index(op.f('ix_shows_release_date'), 'shows', ['release_date'], unique=False)
    op.create_index(op.f('ix_shows_type'), 'shows', ['type'], unique=False)
    op.create_index(op.f('ix_shows_url'), 'shows', ['url'], unique=False)

    # Migrate data from movies table to show table
    conn=op.get_bind()
    conn.execute("INSERT INTO shows (`id`, `name`, `release_date`, `type`, `url`, `origin`, `director`, `overview`, `poster_path`, `added_when`, `added_by_user`, `original_name`, `show_type`) SELECT `id`, `name`, `release_date`, `type`, `url`, `origin`, `director`, `overview`, `poster_path`, `added_when`, `added_by_user`, `original_name`,\"movies\" FROM movies")

    op.create_table('tvshows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nb_seasons', sa.Integer(), nullable=True),
    sa.Column('tmvdb_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['shows.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tmvdb_id')
    )

    # Rename movie_id column to show_id column and update associated foreign key
    op.drop_constraint('marks_ibfk_2', 'marks', type_='foreignkey')
    op.alter_column('marks','movie_id', new_column_name='show_id', server_default=None, existing_server_default=None, nullable=False, existing_nullable=False, type_=None, existing_type=sa.Integer())
    op.create_foreign_key(None, 'marks', 'shows', ['show_id'], ['id'])

    # Rename mark_movie_id column to mark_show_id and update associated foreign key
    op.drop_constraint('mark_comment_ibfk_1', 'mark_comment', type_='foreignkey')
    op.alter_column('mark_comment', 'mark_movie_id', new_column_name='mark_show_id', server_default=None, existing_server_default=None, nullable=False, existing_nullable=False, type_=None, existing_type=sa.Integer())
    op.create_foreign_key(None, 'mark_comment', 'marks', ['mark_user_id', 'mark_show_id'], ['user_id', 'show_id'])

    # Rename table favorite_movies to favorite_shows
    op.drop_constraint('favorite_movies_ibfk_1', 'favorite_movies', type_='foreignkey')
    op.alter_column('favorite_movies', 'movie_id', new_column_name='show_id', server_default=None, existing_server_default=None, nullable=False, existing_nullable=False, type_=None, existing_type=sa.Integer())
    op.rename_table('favorite_movies','favorite_shows')
    op.create_foreign_key(None, 'favorite_shows', 'shows', ['show_id'], ['id'])

    # Create movies table
    op.create_table('movies_temp',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('tmvdb_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['shows.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tmvdb_id')
    )

    # Fill the movie table with correct data in order to handle correctly inheritance
    conn.execute("INSERT INTO movies_temp SELECT `id`, `duration`, `tmvdb_id` FROM movies")

    # Drop the old movie table and rename the temp table
    op.drop_table('movies')
    op.rename_table('movies_temp','movies')

    # Update notification field with new notifications
    conn=op.get_bind()
    res = conn.execute("select id,notifications from users")
    results = res.fetchall()

    for cur_result in results:
        temp_id=cur_result[0]
        temp_dict=json.loads(cur_result[1])
        temp_notif_value=temp_dict["notif_movie_add"]
        del temp_dict["notif_movie_add"]
        temp_dict["notif_show_add"]=temp_notif_value
        final_dict=json.dumps(temp_dict)

        # Update the notification field into the database
        conn.execute("UPDATE users SET notifications='%s' WHERE id=%s" % (json.dumps(temp_dict), temp_id))
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('movies', sa.Column('original_name', mysql.VARCHAR(length=100), nullable=True))
    op.add_column('movies', sa.Column('overview', mysql.VARCHAR(length=2000), nullable=True))
    op.add_column('movies', sa.Column('name', mysql.VARCHAR(length=100), nullable=True))
    op.add_column('movies', sa.Column('poster_path', mysql.VARCHAR(length=255), nullable=True))
    op.add_column('movies', sa.Column('added_when', mysql.DATETIME(), nullable=True))
    op.add_column('movies', sa.Column('director', mysql.VARCHAR(length=200), nullable=True))
    op.add_column('movies', sa.Column('release_date', sa.DATE(), nullable=True))
    op.add_column('movies', sa.Column('url', mysql.VARCHAR(length=100), nullable=True))
    op.add_column('movies', sa.Column('type', mysql.VARCHAR(length=5), nullable=True))
    op.add_column('movies', sa.Column('origin', mysql.VARCHAR(length=5), nullable=True))
    op.add_column('movies', sa.Column('added_by_user', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'movies', type_='foreignkey')
    op.create_foreign_key('movies_ibfk_1', 'movies', 'users', ['added_by_user'], ['id'])
    op.create_foreign_key('movies_ibfk_2', 'movies', 'origins', ['origin'], ['id'])
    op.create_foreign_key('movies_ibfk_3', 'movies', 'types', ['type'], ['id'])
    op.create_index('ix_movies_url', 'movies', ['url'], unique=False)
    op.create_index('ix_movies_type', 'movies', ['type'], unique=False)
    op.create_index('ix_movies_release_date', 'movies', ['release_date'], unique=False)
    op.create_index('ix_movies_original_name', 'movies', ['original_name'], unique=False)
    op.create_index('ix_movies_origin', 'movies', ['origin'], unique=False)
    op.create_index('ix_movies_name', 'movies', ['name'], unique=False)
    op.create_index('ix_movies_director', 'movies', ['director'], unique=False)
    op.add_column('marks', sa.Column('movie_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'marks', type_='foreignkey')
    op.create_foreign_key('marks_ibfk_2', 'marks', 'movies', ['movie_id'], ['id'])
    op.drop_column('marks', 'show_id')
    op.add_column('mark_comment', sa.Column('mark_movie_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'mark_comment', type_='foreignkey')
    op.create_foreign_key('mark_comment_ibfk_1', 'mark_comment', 'marks', ['mark_user_id', 'mark_movie_id'], ['user_id', 'movie_id'])
    op.drop_column('mark_comment', 'mark_show_id')
    op.create_table('favorite_movies',
    sa.Column('movie_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.Column('user_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.Column('star_type', mysql.VARCHAR(length=100), nullable=True),
    sa.Column('added_when', mysql.DATETIME(), nullable=True),
    sa.Column('deleted_when', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name='favorite_movies_ibfk_1'),
    sa.ForeignKeyConstraint(['star_type'], ['favorite_types.star_type'], name='favorite_movies_ibfk_2'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='favorite_movies_ibfk_3'),
    sa.PrimaryKeyConstraint('movie_id', 'user_id'),
    mysql_default_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.drop_table('tvshows')
    op.drop_table('favorite_shows')
    op.drop_index(op.f('ix_shows_url'), table_name='shows')
    op.drop_index(op.f('ix_shows_type'), table_name='shows')
    op.drop_index(op.f('ix_shows_release_date'), table_name='shows')
    op.drop_index(op.f('ix_shows_original_name'), table_name='shows')
    op.drop_index(op.f('ix_shows_origin'), table_name='shows')
    op.drop_index(op.f('ix_shows_name'), table_name='shows')
    op.drop_index(op.f('ix_shows_director'), table_name='shows')
    op.drop_table('shows')
    # ### end Alembic commands ###
